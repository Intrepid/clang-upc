/*===-- config.h.in    - UPC Runtime Support Library ---------------------===*
|*
|*                     The LLVM Compiler Infrastructure
|*
|* Copyright 2012-2014, Intrepid Technology, Inc.  All rights reserved.
|* This file is distributed under a BSD-style Open Source License.
|* See LICENSE-INTREPID.TXT for details.
|*
|*===---------------------------------------------------------------------===*/

/* config.h.in.  Generated from configure.ac by autoheader.  */

#ifndef __CONFIG_H__
#define __CONFIG_H__ 1


//begin gupcr_config_h

/* Define path to preferred addr2line for backtrace */
#undef GUPCR_BACKTRACE_ADDR2LINE

/* Define path to preferred GDB for backtrace */
#undef GUPCR_BACKTRACE_GDB

/* Define to preferred signal for UPC backtrace. */
#undef GUPCR_BACKTRACE_SIGNAL

/* Size of get/put bounce buffer */
#undef GUPCR_BOUNCE_BUFFER_SIZE

/* upc_global_exit() timeout in seconds. */
#undef GUPCR_GLOBAL_EXIT_TIMEOUT

/* Define to 1 if UPC runtime checks are supported. */
#undef GUPCR_HAVE_CHECKS

/* Define to 1 if UPC runtime debugging mode is enabled. */
#undef GUPCR_HAVE_DEBUG

/* Define if UPC GUM debug server is supported. */
#undef GUPCR_HAVE_GUM_DEBUG

/* Define to 1 if UPC runtime statistics collection is supported. */
#undef GUPCR_HAVE_STATS

/* Define to 1 if UPC runtime tracing is supported. */
#undef GUPCR_HAVE_TRACE

/* Maximum number of locks held per thread */
#undef GUPCR_MAX_LOCKS

/* Define to 1 if UPC runtime will use node local memory accesses. */
#undef GUPCR_NODE_LOCAL_MEM

/* Define to 1 if UPC node local access uses mmap-ed file. */
#undef GUPCR_NODE_LOCAL_MEM_MMAP

/* Define to 1 if UPC node local access uses Posix shared memory. */
#undef GUPCR_NODE_LOCAL_MEM_POSIX

/* Portals4 PTE base index. */
#undef GUPCR_PTE_BASE

/* Maximum number of children at each level of a collective operation tree. */
#undef GUPCR_TREE_FANOUT

/* Define to 1 if UPC runtime will use triggered operations. */
#undef GUPCR_USE_TRIGGERED_OPS

/* Maximum number of outstanding put operations. */
#undef GUPCR_MAX_OUTSTANDING_PUTS

/* Define to 1 if UPC runtime will use slurm for job launching. */
#undef GUPCR_JOB_LAUNCHER_SLURM

/* Define to 1 if UPC runtime will use yod for job launching. */
#undef GUPCR_JOB_LAUNCHER_YOD

/* Select target memory pages size. */
#undef GUPCR_MEMORY_PAGE_SIZE

/* Select upc_global_exit() timeout in seconds. */
#undef GUPCR_GLOBAL_EXIT_TIMEOUT

/* Select LIBFABRIC device. */
#undef GUPCR_FABRIC_DEVICE

/* Select LIBFABRIC provider. */
#undef GUPCR_FABRIC_PROVIDER

/* Select LIBFABRIC shared context support. */
#undef GUPCR_FABRIC_SHARED_CTX

/* Define to 1 if UPC runtime can use Cray PMI API. */
#undef HAVE_CRAY_PMI

/* Define to 1 if UPC runtime will use PMI2 API. */
#undef LIBUPC_JOB_PMI2_API

//end gupcr_config_h

/* Define to 1 if you have the `clock_gettime' function. */
#undef HAVE_CLOCK_GETTIME

/* Define to 1 if you have the <execinfo.h> header file. */
#undef HAVE_EXECINFO_H

/* Use BFD library for improved backtrace. */
#undef HAVE_LIBBFD

/* Define to 1 if you have the <limits.h> header file. */
#undef HAVE_LIMITS_H

/* Define to 1 if you have the 'shm_open' function. */
#undef HAVE_SHM_OPEN

/* Define to 1 if the compiler provides the __sync_fetch_and_add function for
   uint32 */
#undef HAVE_SYNC_FETCH_AND_ADD_4

/* Define to 1 if the compiler provides the __sync_fetch_and_add function for
   uint64 */
#undef HAVE_SYNC_FETCH_AND_ADD_8

/* Define to 1 if you have the <sys/time.h> header file. */
#undef HAVE_SYS_TIME_H

/* Define to 1 if UPC backtrace is enabled. */
#undef HAVE_UPC_BACKTRACE

/* Define to 1 if UPC backtrace with ADDR2LINE is enabled. */
#undef HAVE_UPC_BACKTRACE_ADDR2LINE

/* Define to 1 if UPC backtrace with GDB is enabled. */
#undef HAVE_UPC_BACKTRACE_GDB

/* Define to 1 if UPC backtrace signal is enabled. */
#undef HAVE_UPC_BACKTRACE_SIGNAL

/* Define to 1 if UPC link script is supported. */
#undef HAVE_UPC_LINK_SCRIPT

/* Define to 1 if you can safely include both <sys/time.h> and <time.h>. */
#undef TIME_WITH_SYS_TIME

#ifndef ARG_UNUSED
# define ARG_UNUSED(NAME) NAME __attribute__ ((__unused__))
#endif


#endif /* __CONFIG_H__ */

