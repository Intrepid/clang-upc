// RUN: %clang_cc1 %s -emit-llvm -triple x86_64-pc-linux -o - | FileCheck %s

int testeq(shared int * lhs, shared int * rhs) { return lhs == rhs; }
// CHECK: testeq
// CHECK: %0 = load %__upc_shared_pointer_type* %lhs.addr, align 8
// CHECK-NEXT: %1 = load %__upc_shared_pointer_type* %rhs.addr, align 8
// CHECK-NEXT: %2 = extractvalue %__upc_shared_pointer_type %0, 0
// CHECK-NEXT: %3 = [[PHASEOP:and]] i64 %2, [[PHASEVAL:1048575]]
// CHECK-NEXT: %4 = extractvalue %__upc_shared_pointer_type %0, 0
// CHECK-NEXT: %5 = lshr i64 %4, [[THREADSHIFT:20]]
// CHECK-NEXT: %6 = and i64 %5, 1023
// CHECK-NEXT: %7 = extractvalue %__upc_shared_pointer_type %0, 0
// CHECK-NEXT: %8 = [[ADDROP:lshr]] i64 %7, [[ADDRVAL:30]]
// CHECK-NEXT: %9 = extractvalue %__upc_shared_pointer_type %1, 0
// CHECK-NEXT: %10 = [[PHASEOP]] i64 %9, [[PHASEVAL]]
// CHECK-NEXT: %11 = extractvalue %__upc_shared_pointer_type %1, 0
// CHECK-NEXT: %12 = lshr i64 %11, [[THREADSHIFT]]
// CHECK-NEXT: %13 = and i64 %12, 1023
// CHECK-NEXT: %14 = extractvalue %__upc_shared_pointer_type %1, 0
// CHECK-NEXT: %15 = [[ADDROP]] i64 %14, [[ADDRVAL]]
// CHECK-NEXT: %16 = icmp eq i64 %6, %13
// CHECK-NEXT: %17 = icmp eq i64 %8, %15
// CHECK-NEXT: %18 = and i1 %17, %16
// CHECK-NEXT: %conv = zext i1 %18 to i32

int testne(shared int * lhs, shared int * rhs) { return lhs != rhs; }
// CHECK: testne
// CHECK: %0 = load %__upc_shared_pointer_type* %lhs.addr, align 8
// CHECK-NEXT: %1 = load %__upc_shared_pointer_type* %rhs.addr, align 8
// CHECK-NEXT: %2 = extractvalue %__upc_shared_pointer_type %0, 0
// CHECK-NEXT: %3 = and i64 %2, 1048575
// CHECK-NEXT: %4 = extractvalue %__upc_shared_pointer_type %0, 0
// CHECK-NEXT: %5 = lshr i64 %4, 20
// CHECK-NEXT: %6 = and i64 %5, 1023
// CHECK-NEXT: %7 = extractvalue %__upc_shared_pointer_type %0, 0
// CHECK-NEXT: %8 = lshr i64 %7, 30
// CHECK-NEXT: %9 = extractvalue %__upc_shared_pointer_type %1, 0
// CHECK-NEXT: %10 = and i64 %9, 1048575
// CHECK-NEXT: %11 = extractvalue %__upc_shared_pointer_type %1, 0
// CHECK-NEXT: %12 = lshr i64 %11, 20
// CHECK-NEXT: %13 = and i64 %12, 1023
// CHECK-NEXT: %14 = extractvalue %__upc_shared_pointer_type %1, 0
// CHECK-NEXT: %15 = lshr i64 %14, 30
// CHECK-NEXT: %16 = icmp eq i64 %6, %13
// CHECK-NEXT: %17 = icmp eq i64 %8, %15
// CHECK-NEXT: %18 = and i1 %17, %16
// CHECK-NEXT: %19 = xor i1 %18, true
// CHECK-NEXT: %conv = zext i1 %19 to i32

int testlt(shared int * lhs, shared int * rhs) { return lhs < rhs; }
// CHECK: testlt
// CHECK: %0 = load %__upc_shared_pointer_type* %lhs.addr, align 8
// CHECK-NEXT: %1 = load %__upc_shared_pointer_type* %rhs.addr, align 8
// CHECK-NEXT: %2 = extractvalue %__upc_shared_pointer_type %0, 0
// CHECK-NEXT: %3 = [[PHASEOP]] i64 %2, [[PHASEVAL]]
// CHECK-NEXT: %4 = extractvalue %__upc_shared_pointer_type %0, 0
// CHECK-NEXT: %5 = lshr i64 %4, [[THREADSHIFT]]
// CHECK-NEXT: %6 = and i64 %5, 1023
// CHECK-NEXT: %7 = extractvalue %__upc_shared_pointer_type %0, 0
// CHECK-NEXT: %8 = [[ADDROP]] i64 %7, [[ADDRVAL]]
// CHECK-NEXT: %9 = extractvalue %__upc_shared_pointer_type %1, 0
// CHECK-NEXT: %10 = [[PHASEOP]] i64 %9, [[PHASEVAL]]
// CHECK-NEXT: %11 = extractvalue %__upc_shared_pointer_type %1, 0
// CHECK-NEXT: %12 = lshr i64 %11, [[THREADSHIFT]]
// CHECK-NEXT: %13 = and i64 %12, 1023
// CHECK-NEXT: %14 = extractvalue %__upc_shared_pointer_type %1, 0 
// CHECK-NEXT: %15 = [[ADDROP]] i64 %14, [[ADDRVAL]]
// CHECK-NEXT: %addr.diff = sub i64 %8, %15
// CHECK-NEXT: %phase.diff = sub i64 %3, %10
// CHECK-NEXT: %16 = mul i64 %phase.diff, 4
// CHECK-NEXT: %17 = icmp slt i64 %addr.diff, %16
// CHECK-NEXT: %18 = icmp eq i64 %addr.diff, %16
// CHECK-NEXT: %19 = icmp ult i64 %6, %13
// CHECK-NEXT: %20 = icmp eq i64 %6, %13
// CHECK-NEXT: %21 = icmp ult i64 %3, %10
// CHECK-NEXT: %22 = select i1 %20, i1 %21, i1 false
// CHECK-NEXT: %23 = select i1 %19, i1 true, i1 %22
// CHECK-NEXT: %24 = select i1 %18, i1 %23, i1 false
// CHECK-NEXT: %25 = select i1 %17, i1 true, i1 %24
// CHECK-NEXT: %conv = zext i1 %25 to i32

int testle(shared int * lhs, shared int * rhs) { return lhs <= rhs; }
// CHECK: testle
// CHECK: %0 = load %__upc_shared_pointer_type* %lhs.addr, align 8
// CHECK-NEXT: %1 = load %__upc_shared_pointer_type* %rhs.addr, align 8
// CHECK-NEXT: %2 = extractvalue %__upc_shared_pointer_type %1, 0
// CHECK-NEXT: %3 = [[PHASEOP]] i64 %2, [[PHASEVAL]]
// CHECK-NEXT: %4 = extractvalue %__upc_shared_pointer_type %1, 0
// CHECK-NEXT: %5 = lshr i64 %4, [[THREADSHIFT]]
// CHECK-NEXT: %6 = and i64 %5, 1023
// CHECK-NEXT: %7 = extractvalue %__upc_shared_pointer_type %1, 0
// CHECK-NEXT: %8 = [[ADDROP]] i64 %7, [[ADDRVAL]]
// CHECK-NEXT: %9 = extractvalue %__upc_shared_pointer_type %0, 0
// CHECK-NEXT: %10 = [[PHASEOP]] i64 %9, [[PHASEVAL]]
// CHECK-NEXT: %11 = extractvalue %__upc_shared_pointer_type %0, 0
// CHECK-NEXT: %12 = lshr i64 %11, [[THREADSHIFT]]
// CHECK-NEXT: %13 = and i64 %12, 1023
// CHECK-NEXT: %14 = extractvalue %__upc_shared_pointer_type %0, 0 
// CHECK-NEXT: %15 = [[ADDROP]] i64 %14, [[ADDRVAL]]
// CHECK-NEXT: %addr.diff = sub i64 %8, %15
// CHECK-NEXT: %phase.diff = sub i64 %3, %10
// CHECK-NEXT: %16 = mul i64 %phase.diff, 4
// CHECK-NEXT: %17 = icmp slt i64 %addr.diff, %16
// CHECK-NEXT: %18 = icmp eq i64 %addr.diff, %16
// CHECK-NEXT: %19 = icmp ult i64 %6, %13
// CHECK-NEXT: %20 = icmp eq i64 %6, %13
// CHECK-NEXT: %21 = icmp ult i64 %3, %10
// CHECK-NEXT: %22 = select i1 %20, i1 %21, i1 false
// CHECK-NEXT: %23 = select i1 %19, i1 true, i1 %22
// CHECK-NEXT: %24 = select i1 %18, i1 %23, i1 false
// CHECK-NEXT: %25 = select i1 %17, i1 true, i1 %24
// CHECK-NEXT: %26 = xor i1 %25, true
// CHECK-NEXT: %conv = zext i1 %26 to i32

int testgt(shared int * lhs, shared int * rhs) { return lhs > rhs; }
// CHECK: testgt
// CHECK: %0 = load %__upc_shared_pointer_type* %lhs.addr, align 8
// CHECK-NEXT: %1 = load %__upc_shared_pointer_type* %rhs.addr, align 8
// CHECK-NEXT: %2 = extractvalue %__upc_shared_pointer_type %1, 0
// CHECK-NEXT: %3 = [[PHASEOP]] i64 %2, [[PHASEVAL]]
// CHECK-NEXT: %4 = extractvalue %__upc_shared_pointer_type %1, 0
// CHECK-NEXT: %5 = lshr i64 %4, [[THREADSHIFT]]
// CHECK-NEXT: %6 = and i64 %5, 1023
// CHECK-NEXT: %7 = extractvalue %__upc_shared_pointer_type %1, 0
// CHECK-NEXT: %8 = [[ADDROP]] i64 %7, [[ADDRVAL]]
// CHECK-NEXT: %9 = extractvalue %__upc_shared_pointer_type %0, 0
// CHECK-NEXT: %10 = [[PHASEOP]] i64 %9, [[PHASEVAL]]
// CHECK-NEXT: %11 = extractvalue %__upc_shared_pointer_type %0, 0
// CHECK-NEXT: %12 = lshr i64 %11, [[THREADSHIFT]]
// CHECK-NEXT: %13 = and i64 %12, 1023
// CHECK-NEXT: %14 = extractvalue %__upc_shared_pointer_type %0, 0 
// CHECK-NEXT: %15 = [[ADDROP]] i64 %14, [[ADDRVAL]]
// CHECK-NEXT: %addr.diff = sub i64 %8, %15
// CHECK-NEXT: %phase.diff = sub i64 %3, %10
// CHECK-NEXT: %16 = mul i64 %phase.diff, 4
// CHECK-NEXT: %17 = icmp slt i64 %addr.diff, %16
// CHECK-NEXT: %18 = icmp eq i64 %addr.diff, %16
// CHECK-NEXT: %19 = icmp ult i64 %6, %13
// CHECK-NEXT: %20 = icmp eq i64 %6, %13
// CHECK-NEXT: %21 = icmp ult i64 %3, %10
// CHECK-NEXT: %22 = select i1 %20, i1 %21, i1 false
// CHECK-NEXT: %23 = select i1 %19, i1 true, i1 %22
// CHECK-NEXT: %24 = select i1 %18, i1 %23, i1 false
// CHECK-NEXT: %25 = select i1 %17, i1 true, i1 %24
// CHECK-NEXT: %conv = zext i1 %25 to i32

int testge(shared int * lhs, shared int * rhs) { return lhs >= rhs; }
// CHECK: testge
// CHECK: %0 = load %__upc_shared_pointer_type* %lhs.addr, align 8
// CHECK-NEXT: %1 = load %__upc_shared_pointer_type* %rhs.addr, align 8
// CHECK-NEXT: %2 = extractvalue %__upc_shared_pointer_type %0, 0
// CHECK-NEXT: %3 = [[PHASEOP]] i64 %2, [[PHASEVAL]]
// CHECK-NEXT: %4 = extractvalue %__upc_shared_pointer_type %0, 0
// CHECK-NEXT: %5 = lshr i64 %4, [[THREADSHIFT]]
// CHECK-NEXT: %6 = and i64 %5, 1023
// CHECK-NEXT: %7 = extractvalue %__upc_shared_pointer_type %0, 0
// CHECK-NEXT: %8 = [[ADDROP]] i64 %7, [[ADDRVAL]]
// CHECK-NEXT: %9 = extractvalue %__upc_shared_pointer_type %1, 0
// CHECK-NEXT: %10 = [[PHASEOP]] i64 %9, [[PHASEVAL]]
// CHECK-NEXT: %11 = extractvalue %__upc_shared_pointer_type %1, 0
// CHECK-NEXT: %12 = lshr i64 %11, [[THREADSHIFT]]
// CHECK-NEXT: %13 = and i64 %12, 1023
// CHECK-NEXT: %14 = extractvalue %__upc_shared_pointer_type %1, 0 
// CHECK-NEXT: %15 = [[ADDROP]] i64 %14, [[ADDRVAL]]
// CHECK-NEXT: %addr.diff = sub i64 %8, %15
// CHECK-NEXT: %phase.diff = sub i64 %3, %10
// CHECK-NEXT: %16 = mul i64 %phase.diff, 4
// CHECK-NEXT: %17 = icmp slt i64 %addr.diff, %16
// CHECK-NEXT: %18 = icmp eq i64 %addr.diff, %16
// CHECK-NEXT: %19 = icmp ult i64 %6, %13
// CHECK-NEXT: %20 = icmp eq i64 %6, %13
// CHECK-NEXT: %21 = icmp ult i64 %3, %10
// CHECK-NEXT: %22 = select i1 %20, i1 %21, i1 false
// CHECK-NEXT: %23 = select i1 %19, i1 true, i1 %22
// CHECK-NEXT: %24 = select i1 %18, i1 %23, i1 false
// CHECK-NEXT: %25 = select i1 %17, i1 true, i1 %24
// CHECK-NEXT: %26 = xor i1 %25, true
// CHECK-NEXT: %conv = zext i1 %26 to i32
