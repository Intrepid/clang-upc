// RUN: %clang_cc1 %s -emit-llvm -triple x86_64-pc-linux -o - | FileCheck %s

int testeq(shared int * lhs, shared int * rhs) { return lhs == rhs; }
// CHECK: testeq
// CHECK: %{{[0-9]+}} = load %__upc_shared_pointer_type* %lhs.addr, align 8
// CHECK-NEXT: %{{[0-9]+}} = load %__upc_shared_pointer_type* %rhs.addr, align 8
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = [[PHASEOP:and]] i64 %{{[0-9]+}}, [[PHASEVAL:1048575]]
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = lshr i64 %{{[0-9]+}}, [[THREADSHIFT:20]]
// CHECK-NEXT: %{{[0-9]+}} = and i64 %{{[0-9]+}}, 1023
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = [[ADDROP:lshr]] i64 %{{[0-9]+}}, [[ADDRVAL:30]]
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = [[PHASEOP]] i64 %{{[0-9]+}}, [[PHASEVAL]]
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = lshr i64 %{{[0-9]+}}, [[THREADSHIFT]]
// CHECK-NEXT: %{{[0-9]+}} = and i64 %{{[0-9]+}}, 1023
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = [[ADDROP]] i64 %{{[0-9]+}}, [[ADDRVAL]]
// CHECK-NEXT: %{{[0-9]+}} = icmp eq i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = icmp eq i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = and i1 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %conv = zext i1 %{{[0-9]+}} to i32

int testne(shared int * lhs, shared int * rhs) { return lhs != rhs; }
// CHECK: testne
// CHECK: %{{[0-9]+}} = load %__upc_shared_pointer_type* %lhs.addr, align 8
// CHECK-NEXT: %{{[0-9]+}} = load %__upc_shared_pointer_type* %rhs.addr, align 8
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = and i64 %{{[0-9]+}}, 1048575
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = lshr i64 %{{[0-9]+}}, 20
// CHECK-NEXT: %{{[0-9]+}} = and i64 %{{[0-9]+}}, 1023
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = lshr i64 %{{[0-9]+}}, 30
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = and i64 %{{[0-9]+}}, 1048575
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = lshr i64 %{{[0-9]+}}, 20
// CHECK-NEXT: %{{[0-9]+}} = and i64 %{{[0-9]+}}, 1023
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = lshr i64 %{{[0-9]+}}, 30
// CHECK-NEXT: %{{[0-9]+}} = icmp eq i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = icmp eq i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = and i1 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = xor i1 %{{[0-9]+}}, true
// CHECK-NEXT: %conv = zext i1 %{{[0-9]+}} to i32

int testlt(shared int * lhs, shared int * rhs) { return lhs < rhs; }
// CHECK: testlt
// CHECK: %{{[0-9]+}} = load %__upc_shared_pointer_type* %lhs.addr, align 8
// CHECK-NEXT: %{{[0-9]+}} = load %__upc_shared_pointer_type* %rhs.addr, align 8
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = [[PHASEOP]] i64 %{{[0-9]+}}, [[PHASEVAL]]
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = lshr i64 %{{[0-9]+}}, [[THREADSHIFT]]
// CHECK-NEXT: %{{[0-9]+}} = and i64 %{{[0-9]+}}, 1023
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = [[ADDROP]] i64 %{{[0-9]+}}, [[ADDRVAL]]
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = [[PHASEOP]] i64 %{{[0-9]+}}, [[PHASEVAL]]
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = lshr i64 %{{[0-9]+}}, [[THREADSHIFT]]
// CHECK-NEXT: %{{[0-9]+}} = and i64 %{{[0-9]+}}, 1023
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0 
// CHECK-NEXT: %{{[0-9]+}} = [[ADDROP]] i64 %{{[0-9]+}}, [[ADDRVAL]]
// CHECK-NEXT: %addr.diff = sub i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %phase.diff = sub i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = mul i64 %phase.diff, 4
// CHECK-NEXT: %{{[0-9]+}} = icmp slt i64 %addr.diff, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = icmp eq i64 %addr.diff, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = icmp ult i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = icmp eq i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = icmp ult i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = select i1 %{{[0-9]+}}, i1 %{{[0-9]+}}, i1 false
// CHECK-NEXT: %{{[0-9]+}} = select i1 %{{[0-9]+}}, i1 true, i1 %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = select i1 %{{[0-9]+}}, i1 %{{[0-9]+}}, i1 false
// CHECK-NEXT: %{{[0-9]+}} = select i1 %{{[0-9]+}}, i1 true, i1 %{{[0-9]+}}
// CHECK-NEXT: %conv = zext i1 %{{[0-9]+}} to i32

int testle(shared int * lhs, shared int * rhs) { return lhs <= rhs; }
// CHECK: testle
// CHECK: %{{[0-9]+}} = load %__upc_shared_pointer_type* %lhs.addr, align 8
// CHECK-NEXT: %{{[0-9]+}} = load %__upc_shared_pointer_type* %rhs.addr, align 8
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = [[PHASEOP]] i64 %{{[0-9]+}}, [[PHASEVAL]]
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = lshr i64 %{{[0-9]+}}, [[THREADSHIFT]]
// CHECK-NEXT: %{{[0-9]+}} = and i64 %{{[0-9]+}}, 1023
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = [[ADDROP]] i64 %{{[0-9]+}}, [[ADDRVAL]]
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = [[PHASEOP]] i64 %{{[0-9]+}}, [[PHASEVAL]]
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = lshr i64 %{{[0-9]+}}, [[THREADSHIFT]]
// CHECK-NEXT: %{{[0-9]+}} = and i64 %{{[0-9]+}}, 1023
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0 
// CHECK-NEXT: %{{[0-9]+}} = [[ADDROP]] i64 %{{[0-9]+}}, [[ADDRVAL]]
// CHECK-NEXT: %addr.diff = sub i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %phase.diff = sub i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = mul i64 %phase.diff, 4
// CHECK-NEXT: %{{[0-9]+}} = icmp slt i64 %addr.diff, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = icmp eq i64 %addr.diff, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = icmp ult i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = icmp eq i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = icmp ult i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = select i1 %{{[0-9]+}}, i1 %{{[0-9]+}}, i1 false
// CHECK-NEXT: %{{[0-9]+}} = select i1 %{{[0-9]+}}, i1 true, i1 %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = select i1 %{{[0-9]+}}, i1 %{{[0-9]+}}, i1 false
// CHECK-NEXT: %{{[0-9]+}} = select i1 %{{[0-9]+}}, i1 true, i1 %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = xor i1 %{{[0-9]+}}, true
// CHECK-NEXT: %conv = zext i1 %{{[0-9]+}} to i32

int testgt(shared int * lhs, shared int * rhs) { return lhs > rhs; }
// CHECK: testgt
// CHECK: %{{[0-9]+}} = load %__upc_shared_pointer_type* %lhs.addr, align 8
// CHECK-NEXT: %{{[0-9]+}} = load %__upc_shared_pointer_type* %rhs.addr, align 8
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = [[PHASEOP]] i64 %{{[0-9]+}}, [[PHASEVAL]]
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = lshr i64 %{{[0-9]+}}, [[THREADSHIFT]]
// CHECK-NEXT: %{{[0-9]+}} = and i64 %{{[0-9]+}}, 1023
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = [[ADDROP]] i64 %{{[0-9]+}}, [[ADDRVAL]]
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = [[PHASEOP]] i64 %{{[0-9]+}}, [[PHASEVAL]]
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = lshr i64 %{{[0-9]+}}, [[THREADSHIFT]]
// CHECK-NEXT: %{{[0-9]+}} = and i64 %{{[0-9]+}}, 1023
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0 
// CHECK-NEXT: %{{[0-9]+}} = [[ADDROP]] i64 %{{[0-9]+}}, [[ADDRVAL]]
// CHECK-NEXT: %addr.diff = sub i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %phase.diff = sub i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = mul i64 %phase.diff, 4
// CHECK-NEXT: %{{[0-9]+}} = icmp slt i64 %addr.diff, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = icmp eq i64 %addr.diff, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = icmp ult i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = icmp eq i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = icmp ult i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = select i1 %{{[0-9]+}}, i1 %{{[0-9]+}}, i1 false
// CHECK-NEXT: %{{[0-9]+}} = select i1 %{{[0-9]+}}, i1 true, i1 %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = select i1 %{{[0-9]+}}, i1 %{{[0-9]+}}, i1 false
// CHECK-NEXT: %{{[0-9]+}} = select i1 %{{[0-9]+}}, i1 true, i1 %{{[0-9]+}}
// CHECK-NEXT: %conv = zext i1 %{{[0-9]+}} to i32

int testge(shared int * lhs, shared int * rhs) { return lhs >= rhs; }
// CHECK: testge
// CHECK: %{{[0-9]+}} = load %__upc_shared_pointer_type* %lhs.addr, align 8
// CHECK-NEXT: %{{[0-9]+}} = load %__upc_shared_pointer_type* %rhs.addr, align 8
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = [[PHASEOP]] i64 %{{[0-9]+}}, [[PHASEVAL]]
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = lshr i64 %{{[0-9]+}}, [[THREADSHIFT]]
// CHECK-NEXT: %{{[0-9]+}} = and i64 %{{[0-9]+}}, 1023
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = [[ADDROP]] i64 %{{[0-9]+}}, [[ADDRVAL]]
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = [[PHASEOP]] i64 %{{[0-9]+}}, [[PHASEVAL]]
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = lshr i64 %{{[0-9]+}}, [[THREADSHIFT]]
// CHECK-NEXT: %{{[0-9]+}} = and i64 %{{[0-9]+}}, 1023
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0 
// CHECK-NEXT: %{{[0-9]+}} = [[ADDROP]] i64 %{{[0-9]+}}, [[ADDRVAL]]
// CHECK-NEXT: %addr.diff = sub i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %phase.diff = sub i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = mul i64 %phase.diff, 4
// CHECK-NEXT: %{{[0-9]+}} = icmp slt i64 %addr.diff, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = icmp eq i64 %addr.diff, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = icmp ult i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = icmp eq i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = icmp ult i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = select i1 %{{[0-9]+}}, i1 %{{[0-9]+}}, i1 false
// CHECK-NEXT: %{{[0-9]+}} = select i1 %{{[0-9]+}}, i1 true, i1 %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = select i1 %{{[0-9]+}}, i1 %{{[0-9]+}}, i1 false
// CHECK-NEXT: %{{[0-9]+}} = select i1 %{{[0-9]+}}, i1 true, i1 %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = xor i1 %{{[0-9]+}}, true
// CHECK-NEXT: %conv = zext i1 %{{[0-9]+}} to i32
