// RUN: %clang_cc1 %s -emit-llvm -triple x86_64-pc-linux -o - | FileCheck %s

shared int * testadd(shared int * ptr, int x) { return ptr + x; }
// CHECK: testadd
// CHECK: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = and i64 %{{[0-9]+}}, 1048575
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = lshr i64 %{{[0-9]+}}, 20
// CHECK-NEXT: %{{[0-9]+}} = and i64 %{{[0-9]+}}, 1023
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = lshr i64 %{{[0-9]+}}, 30
// CHECK-NEXT: %idx.ext = sext i32 %{{[0-9]+}} to i64
// CHECK-NEXT: %{{[0-9]+}} = load i32* @THREADS
// CHECK-NEXT: %{{[0-9]+}} = zext i32 %{{[0-9]+}} to i64
// CHECK-NEXT: %{{[0-9]+}} = mul nuw i64 %{{[0-9]+}}, 1
// CHECK-NEXT: %{{[0-9]+}} = mul nuw i64 %{{[0-9]+}}, 1
// CHECK-NEXT: %{{[0-9]+}} = add nuw i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = add i64 %{{[0-9]+}}, %idx.ext
// CHECK-NEXT: %{{[0-9]+}} = sdiv i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = srem i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = icmp slt i64 %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = add i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = select i1 %{{[0-9]+}}, i64 %{{[0-9]+}}, i64 %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = sub i64 %{{[0-9]+}}, 1
// CHECK-NEXT: %{{[0-9]+}} = select i1 %{{[0-9]+}}, i64 %{{[0-9]+}}, i64 %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = udiv i64 %{{[0-9]+}}, 1
// CHECK-NEXT: %{{[0-9]+}} = urem i64 %{{[0-9]+}}, 1
// CHECK-NEXT: %{{[0-9]+}} = mul i64 %{{[0-9]+}}, 1
// CHECK-NEXT: %{{[0-9]+}} = sub i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = add i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = mul i64 %{{[0-9]+}}, 4
// CHECK-NEXT: %{{[0-9]+}} = add i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = shl i64 %{{[0-9]+}}, 20
// CHECK-NEXT: %{{[0-9]+}} = or i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = shl i64 %{{[0-9]+}}, 30
// CHECK-NEXT: %{{[0-9]+}} = or i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = insertvalue %__upc_shared_pointer_type undef, i64 %{{[0-9]+}}, 0

shared int * testsub(shared int * ptr, int x) { return ptr - x; }
// CHECK: testsub
// CHECK: %{{[0-9]+}} = load %__upc_shared_pointer_type* %ptr.addr, align 8
// CHECK-NEXT: %{{[0-9]+}} = load i32* %x.addr, align 4
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = and i64 %{{[0-9]+}}, 1048575
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = lshr i64 %{{[0-9]+}}, 20
// CHECK-NEXT: %{{[0-9]+}} = and i64 %{{[0-9]+}}, 1023
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = lshr i64 %{{[0-9]+}}, 30
// CHECK-NEXT: %idx.ext = sext i32 %{{[0-9]+}} to i64
// CHECK-NEXT: %{{[0-9]+}} = sub i64 0, %idx.ext
// CHECK-NEXT: %{{[0-9]+}} = load i32* @THREADS
// CHECK-NEXT: %{{[0-9]+}} = zext i32 %{{[0-9]+}} to i64
// CHECK-NEXT: %{{[0-9]+}} = mul nuw i64 %{{[0-9]+}}, 1
// CHECK-NEXT: %{{[0-9]+}} = mul nuw i64 %{{[0-9]+}}, 1
// CHECK-NEXT: %{{[0-9]+}} = add nuw i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = add i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = sdiv i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = srem i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = icmp slt i64 %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = add i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = select i1 %{{[0-9]+}}, i64 %{{[0-9]+}}, i64 %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = sub i64 %{{[0-9]+}}, 1
// CHECK-NEXT: %{{[0-9]+}} = select i1 %{{[0-9]+}}, i64 %{{[0-9]+}}, i64 %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = udiv i64 %{{[0-9]+}}, 1
// CHECK-NEXT: %{{[0-9]+}} = urem i64 %{{[0-9]+}}, 1
// CHECK-NEXT: %{{[0-9]+}} = mul i64 %{{[0-9]+}}, 1
// CHECK-NEXT: %{{[0-9]+}} = sub i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = add i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = mul i64 %{{[0-9]+}}, 4
// CHECK-NEXT: %{{[0-9]+}} = add i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = shl i64 %{{[0-9]+}}, 20
// CHECK-NEXT: %{{[0-9]+}} = or i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = shl i64 %{{[0-9]+}}, 30
// CHECK-NEXT: %{{[0-9]+}} = or i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = insertvalue %__upc_shared_pointer_type undef, i64 %{{[0-9]+}}, 0

long long testsub2(shared int * ptr1, shared int * ptr2) { return ptr1 - ptr2; }
// CHECK: testsub2
// CHECK: %{{[0-9]+}} = load %__upc_shared_pointer_type* %ptr1.addr, align 8
// CHECK-NEXT: %{{[0-9]+}} = load %__upc_shared_pointer_type* %ptr2.addr, align 8
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = and i64 %{{[0-9]+}}, 1048575
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = lshr i64 %{{[0-9]+}}, 20
// CHECK-NEXT: %{{[0-9]+}} = and i64 %{{[0-9]+}}, 1023
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = lshr i64 %{{[0-9]+}}, 30
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = and i64 %{{[0-9]+}}, 1048575
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = lshr i64 %{{[0-9]+}}, 20
// CHECK-NEXT: %{{[0-9]+}} = and i64 %{{[0-9]+}}, 1023
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = lshr i64 %{{[0-9]+}}, 30
// CHECK-NEXT: %addr.diff = sub i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = sdiv exact i64 %addr.diff, 4
// CHECK-NEXT: %{{[0-9]+}} = load i32* @THREADS
// CHECK-NEXT: %{{[0-9]+}} = zext i32 %{{[0-9]+}} to i64
// CHECK-NEXT: %thread.diff = sub i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = mul i64 %thread.diff, 1
// CHECK-NEXT: %phase.diff = sub i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = sub i64 %{{[0-9]+}}, %phase.diff
// CHECK-NEXT: %block.diff = mul i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = add i64 %{{[0-9]+}}, %phase.diff
// CHECK-NEXT: %ptr.diff = add i64 %block.diff, %{{[0-9]+}}

shared int *testsubscript(shared int * ptr, int idx) { return &ptr[idx]; }
// CHECK: testsubscript
// CHECK: %{{[0-9]+}} = load i32* %idx.addr, align 4
// CHECK-NEXT: %idxprom = sext i32 %{{[0-9]+}} to i64
// CHECK-NEXT: %{{[0-9]+}} = load %__upc_shared_pointer_type* %ptr.addr, align 8
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = and i64 %{{[0-9]+}}, 1048575
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = lshr i64 %{{[0-9]+}}, 20
// CHECK-NEXT: %{{[0-9]+}} = and i64 %{{[0-9]+}}, 1023
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = lshr i64 %{{[0-9]+}}, 30
// CHECK-NEXT: %{{[0-9]+}} = load i32* @THREADS
// CHECK-NEXT: %{{[0-9]+}} = zext i32 %{{[0-9]+}} to i64
// CHECK-NEXT: %{{[0-9]+}} = mul nuw i64 %{{[0-9]+}}, 1
// CHECK-NEXT: %{{[0-9]+}} = mul nuw i64 %{{[0-9]+}}, 1
// CHECK-NEXT: %{{[0-9]+}} = add nuw i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = add i64 %{{[0-9]+}}, %idxprom
// CHECK-NEXT: %{{[0-9]+}} = sdiv i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = srem i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = icmp slt i64 %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = add i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = select i1 %{{[0-9]+}}, i64 %{{[0-9]+}}, i64 %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = sub i64 %{{[0-9]+}}, 1
// CHECK-NEXT: %{{[0-9]+}} = select i1 %{{[0-9]+}}, i64 %{{[0-9]+}}, i64 %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = udiv i64 %{{[0-9]+}}, 1
// CHECK-NEXT: %{{[0-9]+}} = urem i64 %{{[0-9]+}}, 1
// CHECK-NEXT: %{{[0-9]+}} = mul i64 %{{[0-9]+}}, 1
// CHECK-NEXT: %{{[0-9]+}} = sub i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = add i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = mul i64 %{{[0-9]+}}, 4
// CHECK-NEXT: %{{[0-9]+}} = add i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = shl i64 %{{[0-9]+}}, 20
// CHECK-NEXT: %{{[0-9]+}} = or i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = shl i64 %{{[0-9]+}}, 30
// CHECK-NEXT: %{{[0-9]+}} = or i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = insertvalue %__upc_shared_pointer_type undef, i64 %{{[0-9]+}}, 0

void testincrement(shared int * * ptr) { ++*ptr; }
// CHECK: testincrement
// CHECK: %{{[0-9]+}} = load %__upc_shared_pointer_type* %{{[0-9]+}}, align 8
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = and i64 %{{[0-9]+}}, 1048575
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = lshr i64 %{{[0-9]+}}, 20
// CHECK-NEXT: %{{[0-9]+}} = and i64 %{{[0-9]+}}, 1023
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = lshr i64 %{{[0-9]+}}, 30
// CHECK-NEXT: %{{[0-9]+}} = load i32* @THREADS
// CHECK-NEXT: %{{[0-9]+}} = zext i32 %{{[0-9]+}} to i64
// CHECK-NEXT: %{{[0-9]+}} = mul nuw i64 %{{[0-9]+}}, 1
// CHECK-NEXT: %{{[0-9]+}} = mul nuw i64 %{{[0-9]+}}, 1
// CHECK-NEXT: %{{[0-9]+}} = add nuw i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = add i64 %{{[0-9]+}}, 1
// CHECK-NEXT: %{{[0-9]+}} = sdiv i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = srem i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = icmp slt i64 %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = add i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = select i1 %{{[0-9]+}}, i64 %{{[0-9]+}}, i64 %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = sub i64 %{{[0-9]+}}, 1
// CHECK-NEXT: %{{[0-9]+}} = select i1 %{{[0-9]+}}, i64 %{{[0-9]+}}, i64 %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = udiv i64 %{{[0-9]+}}, 1
// CHECK-NEXT: %{{[0-9]+}} = urem i64 %{{[0-9]+}}, 1
// CHECK-NEXT: %{{[0-9]+}} = mul i64 %{{[0-9]+}}, 1
// CHECK-NEXT: %{{[0-9]+}} = sub i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = add i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = mul i64 %{{[0-9]+}}, 4
// CHECK-NEXT: %{{[0-9]+}} = add i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = shl i64 %{{[0-9]+}}, 20
// CHECK-NEXT: %{{[0-9]+}} = or i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = shl i64 %{{[0-9]+}}, 30
// CHECK-NEXT: %{{[0-9]+}} = or i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = insertvalue %__upc_shared_pointer_type undef, i64 %{{[0-9]+}}, 0

void testplusassign(shared int * * ptr, int val) { *ptr += val; }
// CHECK: testplusassign
// CHECK: %{{[0-9]+}} = load %__upc_shared_pointer_type* %{{[0-9]+}}, align 8
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = and i64 %{{[0-9]+}}, 1048575
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = lshr i64 %{{[0-9]+}}, 20
// CHECK-NEXT: %{{[0-9]+}} = and i64 %{{[0-9]+}}, 1023
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = lshr i64 %{{[0-9]+}}, 30
// CHECK-NEXT: %idx.ext = sext i32 %{{[0-9]+}} to i64
// CHECK-NEXT: %{{[0-9]+}} = load i32* @THREADS
// CHECK-NEXT: %{{[0-9]+}} = zext i32 %{{[0-9]+}} to i64
// CHECK-NEXT: %{{[0-9]+}} = mul nuw i64 %{{[0-9]+}}, 1
// CHECK-NEXT: %{{[0-9]+}} = mul nuw i64 %{{[0-9]+}}, 1
// CHECK-NEXT: %{{[0-9]+}} = add nuw i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = add i64 %{{[0-9]+}}, %idx.ext
// CHECK-NEXT: %{{[0-9]+}} = sdiv i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = srem i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = icmp slt i64 %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = add i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = select i1 %{{[0-9]+}}, i64 %{{[0-9]+}}, i64 %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = sub i64 %{{[0-9]+}}, 1
// CHECK-NEXT: %{{[0-9]+}} = select i1 %{{[0-9]+}}, i64 %{{[0-9]+}}, i64 %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = udiv i64 %{{[0-9]+}}, 1
// CHECK-NEXT: %{{[0-9]+}} = urem i64 %{{[0-9]+}}, 1
// CHECK-NEXT: %{{[0-9]+}} = mul i64 %{{[0-9]+}}, 1
// CHECK-NEXT: %{{[0-9]+}} = sub i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = add i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = mul i64 %{{[0-9]+}}, 4
// CHECK-NEXT: %{{[0-9]+}} = add i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = shl i64 %{{[0-9]+}}, 20
// CHECK-NEXT: %{{[0-9]+}} = or i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = shl i64 %{{[0-9]+}}, 30
// CHECK-NEXT: %{{[0-9]+}} = or i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = insertvalue %__upc_shared_pointer_type undef, i64 %{{[0-9]+}}, 0

typedef int array_type[10][THREADS][7];

shared array_type * testarrayplus(shared array_type * ptr, int x) { return ptr + x; }
// CHECK: testarrayplus
// CHECK: %{{[0-9]+}} = load %__upc_shared_pointer_type* %ptr.addr, align 8
// CHECK-NEXT: %{{[0-9]+}} = load i32* %x.addr, align 4
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = and i64 %{{[0-9]+}}, 1048575
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = lshr i64 %{{[0-9]+}}, 20
// CHECK-NEXT: %{{[0-9]+}} = and i64 %{{[0-9]+}}, 1023
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = lshr i64 %{{[0-9]+}}, 30
// CHECK-NEXT: %idx.ext = sext i32 %{{[0-9]+}} to i64
// CHECK-NEXT: %{{[0-9]+}} = load i32* @THREADS
// CHECK-NEXT: %{{[0-9]+}} = zext i32 %{{[0-9]+}} to i64
// CHECK-NEXT: %{{[0-9]+}} = mul nuw i64 1, %{{[0-9]+}}
// CHECK-NEXT: %mul.dim = mul nuw i64 10, %{{[0-9]+}}
// CHECK-NEXT: %mul.dim2 = mul nuw i64 %mul.dim, 7
// CHECK-NEXT: %idx.dim = mul nsw i64 %idx.ext, %mul.dim2
// CHECK-NEXT: %{{[0-9]+}} = load i32* @THREADS
// CHECK-NEXT: %{{[0-9]+}} = zext i32 %{{[0-9]+}} to i64
// CHECK-NEXT: %{{[0-9]+}} = mul nuw i64 %{{[0-9]+}}, 1
// CHECK-NEXT: %{{[0-9]+}} = mul nuw i64 %{{[0-9]+}}, 1
// CHECK-NEXT: %{{[0-9]+}} = add nuw i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = add i64 %{{[0-9]+}}, %idx.dim
// CHECK-NEXT: %{{[0-9]+}} = sdiv i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = srem i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = icmp slt i64 %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = add i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = select i1 %{{[0-9]+}}, i64 %{{[0-9]+}}, i64 %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = sub i64 %{{[0-9]+}}, 1
// CHECK-NEXT: %{{[0-9]+}} = select i1 %{{[0-9]+}}, i64 %{{[0-9]+}}, i64 %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = udiv i64 %{{[0-9]+}}, 1
// CHECK-NEXT: %{{[0-9]+}} = urem i64 %{{[0-9]+}}, 1
// CHECK-NEXT: %{{[0-9]+}} = mul i64 %{{[0-9]+}}, 1
// CHECK-NEXT: %{{[0-9]+}} = sub i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = add i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = mul i64 %{{[0-9]+}}, 4
// CHECK-NEXT: %{{[0-9]+}} = add i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = shl i64 %{{[0-9]+}}, 20
// CHECK-NEXT: %{{[0-9]+}} = or i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = shl i64 %{{[0-9]+}}, 30
// CHECK-NEXT: %{{[0-9]+}} = or i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = insertvalue %__upc_shared_pointer_type undef, i64 %{{[0-9]+}}, 0

int testarrayminus2(shared array_type * ptr1, shared array_type * ptr2) { return ptr1 - ptr2; }
// CHECK: testarrayminus2
// CHECK: %{{[0-9]+}} = load %__upc_shared_pointer_type* %ptr1.addr, align 8
// CHECK-NEXT: %{{[0-9]+}} = load %__upc_shared_pointer_type* %ptr2.addr, align 8
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = and i64 %{{[0-9]+}}, 1048575
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = lshr i64 %{{[0-9]+}}, 20
// CHECK-NEXT: %{{[0-9]+}} = and i64 %{{[0-9]+}}, 1023
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = lshr i64 %{{[0-9]+}}, 30
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = and i64 %{{[0-9]+}}, 1048575
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = lshr i64 %{{[0-9]+}}, 20
// CHECK-NEXT: %{{[0-9]+}} = and i64 %{{[0-9]+}}, 1023
// CHECK-NEXT: %{{[0-9]+}} = extractvalue %__upc_shared_pointer_type %{{[0-9]+}}, 0
// CHECK-NEXT: %{{[0-9]+}} = lshr i64 %{{[0-9]+}}, 30
// CHECK-NEXT: %{{[0-9]+}} = load i32* @THREADS
// CHECK-NEXT: %{{[0-9]+}} = zext i32 %{{[0-9]+}} to i64
// CHECK-NEXT: %{{[0-9]+}} = mul nuw i64 1, %{{[0-9]+}}
// CHECK-NEXT: %mul.dim = mul nuw i64 10, %{{[0-9]+}}
// CHECK-NEXT: %mul.dim4 = mul nuw i64 %mul.dim, 7
// CHECK-NEXT: %addr.diff = sub i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = sdiv exact i64 %addr.diff, 4
// CHECK-NEXT: %{{[0-9]+}} = load i32* @THREADS
// CHECK-NEXT: %{{[0-9]+}} = zext i32 %{{[0-9]+}} to i64
// CHECK-NEXT: %thread.diff = sub i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = mul i64 %thread.diff, 1
// CHECK-NEXT: %phase.diff = sub i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = sub i64 %{{[0-9]+}}, %phase.diff
// CHECK-NEXT: %block.diff = mul i64 %{{[0-9]+}}, %{{[0-9]+}}
// CHECK-NEXT: %{{[0-9]+}} = add i64 %{{[0-9]+}}, %phase.diff
// CHECK-NEXT: %ptr.diff = add i64 %block.diff, %{{[0-9]+}}
// CHECK-NEXT: %diff.dim = sdiv exact i64 %ptr.diff, %mul.dim4
// CHECK-NEXT: %conv = trunc i64 %diff.dim to i32
